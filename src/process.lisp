(in-package #:swagger.process)

(defun process (path &key ignore-path malform-path)
  (cond ((cl-fad:directory-exists-p path) 
	 (let ((file-count (length (cl-fad:list-directory path)))
	       (ignored (when ignore-path (split "\\n" (open-file ignore-path))))
	       (counter 0)
	       collect)
	   (log:info "[process][directory has ~d files]" file-count)
	   (cl-fad:walk-directory
	    (truename path)
	    #'(lambda (item)
		(incf counter)
		(unless (member (namestring item) ignored :test #'string=)
		  (let ((processed (process item)))
		    (log:info "[~d/~d][processing ~d]" counter file-count item)
		    (if processed
			(with-slots (swagger_json meta) processed
			  (cond ((and (eq +class-openapi-object+ (class-of swagger_json))
				      (eq +class-meta-object+ (class-of meta))
				      (with-slots (paths info) swagger_json (and paths info)))
				 (when ignore-path (add-line (namestring item) ignore-path))
				 (push processed collect)) 
				(t (when malform-path (add-line (namestring item) malform-path)))))
			(when malform-path (add-line (namestring item) malform-path))))))
	    :if-does-not-exist :ignore
	    :test #'(lambda (item) (string= (get-extension item) ".json")))
	   collect))
	((cl-fad:file-exists-p path)
	 (let* ((content (open-file (pathname path)))
		(decode (jonathan:parse content :as :alist)))
	   (cast decode +class-map+)))
	(t (log:warn "[error][provided path ~d does not exist]" path))))
